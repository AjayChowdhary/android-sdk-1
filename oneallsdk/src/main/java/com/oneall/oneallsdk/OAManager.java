package com.oneall.oneallsdk;

import android.app.Activity;
import android.app.ProgressDialog;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.content.Intent;

import com.crashlytics.android.Crashlytics;
import com.oneall.oneallsdk.rest.ServiceCallback;
import com.oneall.oneallsdk.rest.ServiceManagerProvider;
import com.oneall.oneallsdk.rest.models.NativeLoginRequest;
import com.oneall.oneallsdk.rest.models.PostMessageRequest;
import com.oneall.oneallsdk.rest.models.PostMessageResponse;
import com.oneall.oneallsdk.rest.models.Provider;
import com.oneall.oneallsdk.rest.models.ResponseConnection;
import com.oneall.oneallsdk.rest.models.User;
import com.oneall.oneallsdk.rest.service.ConnectionService;
import com.oneall.oneallsdk.rest.service.MessagePostService;
import com.oneall.oneallsdk.rest.service.UserService;
import com.twitter.sdk.android.Twitter;
import com.twitter.sdk.android.core.TwitterAuthConfig;

import java.util.ArrayList;
import java.util.Collection;
import java.util.UUID;

import io.fabric.sdk.android.Fabric;
import retrofit.Callback;
import retrofit.RetrofitError;
import retrofit.client.Response;

/**
 * Main manager providing interface to all OneAll operations and the whole API
 */
public class OAManager {

    // region Constants

    private static final Integer INTENT_REQUEST_CODE_SELECT_ACTIVITY = 0;
    private static final Integer INTENT_REQUEST_CODE_LOGIN = 1;

    // endregion

    // region Helper classes and interfaces

    public interface LoginHandler {
        void loginSuccess(User user, Boolean newUser);
        void loginFailure(OAError error);
    }

    public interface OAManagerPostHandler {
        void postComplete(Boolean success, PostMessageResponse response);
    }

    // endregion

    // region Properties

    /** singleton instance variable */
    private static OAManager mInstance = null;

    /** application context */
    private FragmentActivity rootActivity = null;

    /** login handler to call back */
    private LoginHandler loginHandler;

    /** nonce generated by the last login request */
    private String lastNonce;

    /** state flag, bad, bad, bad, see onPostResume() for explanation */
    private Boolean loginOnResume = false;

    /** key of the provider selected */
    private String loginOnResumeProvider;

    /** currently selected provider */
    private Provider selectedProvider;

    // endregion

    // region Lifecycle

    public static OAManager getInstance() {
        if (mInstance == null) {
            synchronized (OAManager.class) {
                if (mInstance == null) {
                    mInstance = new OAManager();
                }
            }
        }
        return mInstance;
    }

    // endregion

    // region Interface methods

    public void setup(
            FragmentActivity rootActivity,
            String subdomain,
            String twitterConsumerKey,
            String twitterSecret) {

        this.rootActivity = rootActivity;
        OALog.init(rootActivity);
        FacebookWrapper.getInstance().init(rootActivity);

        TwitterAuthConfig authConfig = new TwitterAuthConfig(twitterConsumerKey, twitterSecret);
        Fabric.with(this.rootActivity, new Crashlytics(), new Twitter(authConfig));

        OALog.info(String.format("SDK init with subdomain %s", subdomain));

        Settings.getInstance().setSubdomain(subdomain);
        ProviderManager.getInstance().refreshProviders(rootActivity);
    }

    public Boolean login(FragmentActivity rootActivity, String provider, LoginHandler handler) {
        loginHandler = handler;
        this.rootActivity = rootActivity;
        selectedProvider = ProviderManager.getInstance().findByKey(provider);

        if (selectedProvider == null) {
            throw new IllegalArgumentException("Specified provider does not exist");
        }

        lastNonce = UUID.randomUUID().toString();

        switch (provider) {
            case "facebook":
                FacebookWrapper.getInstance().login(new FacebookWrapper.SessionStateListener() {
                    @Override
                    public void success(String accessToken) {
                        facebookLoginSuccess(accessToken);
                    }

                    @Override
                    public void failure(OAError error) {
                        facebookLoginFailure(error);
                    }
                });
                break;
            case "twitter":
                TwitterWrapper.getInstance().login(rootActivity, new TwitterWrapper.LoginComplete() {
                    @Override
                    public void success(String accessToken, String secret) {
                        twitterLoginSuccess(accessToken, secret);
                    }

                    @Override
                    public void failure(OAError error) {
                        twitterLoginFailure(error);
                    }
                });
                break;
            default:
                webLoginWithProvider();
                break;
        }

        return true;
    }

    public Boolean login(FragmentActivity rootActivity, LoginHandler handler) {
        loginHandler = handler;
        this.rootActivity = rootActivity;

        Intent intent = new Intent(rootActivity, ProviderSelectActivity.class);
        rootActivity.startActivityForResult(intent, INTENT_REQUEST_CODE_SELECT_ACTIVITY);
        return true;
    }

    public void postMessage(
            String text,
            String pictureUrl,
            String videoUrl,
            String linkUrl,
            String linkName,
            String linkCaption,
            String linkDescription,
            Boolean enableTracking,
            String userToken,
            String publishToken,
            final Collection<String> providers,
            final OAManagerPostHandler handler) {

        MessagePostService service = ServiceManagerProvider.getInstance().getPostService();
        PostMessageRequest request = new PostMessageRequest(
                providers,
                text,
                pictureUrl,
                videoUrl,
                linkUrl,
                linkName,
                linkCaption,
                linkDescription,
                enableTracking);

        OALog.info("Posting message to providers");

        service.post(
                userToken,
                ServiceManagerProvider.buildPublishAuthHeader(publishToken),
                request,
                new ServiceCallback<PostMessageResponse>() {
                    @Override
                    public void success(PostMessageResponse postMessageResponse, Response response) {
                        OALog.info(String.format("Message post succeeded: %s", response.toString()));
                        if (handler != null) {
                            handler.postComplete(true, postMessageResponse);
                        }
                    }

                    @Override
                    public void failure(ServiceError error) {
                        //noinspection ThrowableResultOfMethodCallIgnored
                        OALog.warn(String.format(
                                "Message post failed: %s", error.getRetrofitError().getMessage()));

                        if (handler != null) {
                            handler.postComplete(false, error.getResponse());
                        }
                    }
                });
    }

    /**
     * it is impossible to work with GUI (specifically Fragments) from onActivityResult():
     * http://stackoverflow.com/questions/16265733/
     *
     * In order to overcome this, onActivityResult() stores the required operation in queue and
     * onPostResume() takes care of this when the state has been restored. An ugly solution for an
     * ugly problem.
     */
    public void onPostResume() {
        if (loginOnResume) {
            String providerKey = loginOnResumeProvider;
            loginOnResume = false;
            loginOnResumeProvider = null;

            login(rootActivity, providerKey, loginHandler);
        }
    }

    public Collection<String> getProviders() {
        ArrayList<String> rv = new ArrayList<>();
        for (Provider p : ProviderManager.getInstance().getProviders()) {
            rv.add(p.getKey());
        }
        return rv;
    }

    // endregion

    // region Utilities

    Callback<ResponseConnection> connectionCallback = new Callback<ResponseConnection>() {
        @Override
        public void success(ResponseConnection connection, Response response) {
            if (loginHandler != null) {
                loginHandler.loginSuccess(connection.data.user, false);
                loginHandler = null;
            }
        }

        @Override
        public void failure(RetrofitError error) {
            if (loginHandler != null) {
                loginHandler.loginFailure(new OAError(
                        OAError.ErrorCode.OA_ERROR_CONNECTION_ERROR,
                        rootActivity.getResources().getString(R.string.connection_failure)));
                loginHandler = null;
            }
        }
    };

    private void webLoginComplete(Intent data) {
        String url = data.getExtras().getString(WebLoginActivity.INTENT_EXTRA_URL);

        OALog.info(String.format("Web login completed with URL %s", url));

        ConnectionService service = ServiceManagerProvider.getInstance().getConnectionService();

        service.info(
                ServiceManagerProvider.buildAuthHeader(lastNonce),
                Uri.parse(url).getQueryParameter("connection_token"),
                connectionCallback);
    }

    private UserInputDialog.DialogListener userInputListener = new UserInputDialog.DialogListener() {
        @Override
        public void onCancel() {
        }

        @Override
        public void onAccept(String userInput) {
            webLoginWithLoginData(userInput);
        }
    };

    /**
     * actual login with user information already filled in
     * @param userInput user information if required by this provider, can be null
     */
    private void webLoginWithLoginData(String userInput) {
        String url = getApiUrlForProvider(selectedProvider, lastNonce, userInput);
        OALog.info(String.format(
                "Web login with provider %s and url: %s", selectedProvider.getKey(), url));
        Intent i = new Intent(rootActivity, WebLoginActivity.class);
        i.putExtra(WebLoginActivity.INTENT_EXTRA_URL, url);

        rootActivity.startActivityForResult(i, INTENT_REQUEST_CODE_LOGIN);
    }

    private void webLoginWithProvider() {
        OALog.info(String.format("Login with provider %s", selectedProvider));

        if (selectedProvider.getAuthentication().getIsUserInputRequired()) {
            FragmentManager fm = rootActivity.getSupportFragmentManager();
            UserInputDialog dialog = new UserInputDialog();
            dialog.setListener(userInputListener);

            Bundle args = new Bundle();
            args.putString(UserInputDialog.ARGUMENT_USER_INPUT_TYPE, selectedProvider.getAuthentication().getUserInputType());
            args.putString(UserInputDialog.ARGUMENT_PROVIDER_NAME, selectedProvider.getName());

            dialog.setArguments(args);
            dialog.show(fm, "user_input_dialog");
        } else {
            webLoginWithLoginData(null);
        }
    }


    private String getApiUrlForProvider(Provider provider, String nonce, String loginData) {
        String url = String.format(
                "https://%s.api.oneall.com/socialize/connect/mobile/%s/?nonce=%s&callback_uri=oneall://%s",
                Settings.getInstance().getSubdomain(),
                provider.getKey(),
                nonce,
                provider.getKey());
        Uri.Builder uriBuilder = Uri.parse(url).buildUpon();
        if (loginData != null) {
            uriBuilder.appendQueryParameter("login_data", loginData);
        }

        return uriBuilder.build().toString();
    }

    private void facebookLoginFailure(OAError error) {
        OALog.warn(String.format("Failed to login with Facebook: %s", error.getMessage()));
        if (loginHandler != null) {
            loginHandler.loginFailure(error);
        }
    }

    private void facebookLoginSuccess(String accessToken) {
        OALog.warn("Logged in with Facebook");
        retrieveConnectionInfo("facebook", accessToken, null);
    }

    private void twitterLoginFailure(OAError error) {
        OALog.warn(String.format("Failed to login with Twitter: %s", error.getMessage()));
        if (loginHandler != null) {
            loginHandler.loginFailure(
                    new OAError(OAError.ErrorCode.OA_ERROR_AUTH_FAIL,
                    error.getMessage()));
        }
    }

    private void twitterLoginSuccess(String accessToken, String secret) {
        OALog.warn("Logged in with Facebook");
        retrieveConnectionInfo("facebook", accessToken, secret);
    }

    private void retrieveConnectionInfo(String platform, String accessToken, String secret) {
        final ProgressDialog pd = ProgressDialog.show(
                rootActivity, rootActivity.getString(R.string.reading_user_info), "");

        UserService service = ServiceManagerProvider.getInstance().getUserService();

        NativeLoginRequest request = new NativeLoginRequest(platform, accessToken, secret);

        service.info(request, new Callback<ResponseConnection>() {
            @Override
            public void success(ResponseConnection connection, Response response) {
                pd.hide();
                if (loginHandler != null) {
                    loginHandler.loginSuccess(connection.data.user, false);
                    loginHandler = null;
                }
            }

            @Override
            public void failure(RetrofitError error) {
                pd.hide();
                if (loginHandler != null) {
                    loginHandler.loginFailure(new OAError(
                            OAError.ErrorCode.OA_ERROR_CONNECTION_ERROR,
                            rootActivity.getResources().getString(R.string.connection_failure)));
                    loginHandler = null;
                }
            }
        });
    }

    // endregion

    // region Activity lifecycle responders

    // To ensure that the sessions are set up correctly, your fragment must override the fragment lifecycle methods: onCreate(), onResume(), onPause(), onDestroy(), onActivityResult() and onSaveInstanceState() and call the corresponding UiLifecycleHelper methods.

    public void onCreate(Bundle savedInstanceState) {
        FacebookWrapper.getInstance().onCreate(savedInstanceState);
    }

    public void onResume() {
        FacebookWrapper.getInstance().onResume();
    }

    public void onPause() {
        FacebookWrapper.getInstance().onPause();
    }

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        /* on cancelled login, nothing to do here */
        if (resultCode == Activity.RESULT_CANCELED ||
                resultCode == WebLoginActivity.RESULT_FAILED) {

            if (loginHandler != null) {
                loginHandler.loginFailure(new OAError(OAError.ErrorCode.OA_ERROR_CANCELLED, null));
                loginHandler = null;
            }
        } else if (requestCode == INTENT_REQUEST_CODE_SELECT_ACTIVITY) {
            loginOnResumeProvider = data.getExtras().getString(ProviderSelectActivity.INTENT_EXTRA_PROVIDER);
            loginOnResume = true;
        } else if (requestCode == INTENT_REQUEST_CODE_LOGIN) {
            webLoginComplete(data);
        } else {
            FacebookWrapper.getInstance().onActivityResult(requestCode, resultCode, data);
            TwitterWrapper.getInstance().onActivityResult(requestCode, resultCode, data);
        }
    }

    public void onSaveInstanceState(Bundle outState) {
        FacebookWrapper.getInstance().onSaveInstanceState(outState);
    }

    public void onDestroy() {
        FacebookWrapper.getInstance().onDestroy();
    }

    // endregion

}
